@page "/admin/user-management"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using CCP.Repositori.Entities
@attribute [Authorize(Roles = "Admin")]
@inject UserManager<AppUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager NavigationManager
@layout AdminDashboard

<PageTitle>User Management</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-12">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">User Management</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading users...</p>
                        </div>
                    }
                    else
                    {
                        <!-- Search and Filter -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Search by name or email" @bind="searchQuery" @bind:event="oninput" />
                                    <button class="btn btn-primary" @onclick="SearchUsers">
                                        <i class="bi bi-search"></i> Search
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" @bind="selectedRole" @bind:after="FilterByRole">
                                    <option value="">All Roles</option>
                                    <option value="Parent">Parent</option>
                                    <option value="Expert">Expert</option>
                                </select>
                            </div>
                        </div>

                        <!-- User Table -->
                        @if (filteredUsers.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover table-bordered">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Full Name</th>
                                            <th>Email</th>
                                            <th>Role</th>
                                            <th>Registration Date</th>
                                            <th>Last Login</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in filteredUsers)
                                        {
                                            <tr>
                                                <td>@user.FullName</td>
                                                <td>@user.Email</td>
                                                <td>@user.Role</td>
                                                <td>@user.RegistrationDate.ToString("dd MMM yyyy")</td>
                                                <td>@(user.LastLogin?.ToString("dd MMM yyyy HH:mm") ?? "Never")</td>
                                                <td>
                                                    <span class="badge @(user.IsActive ? "bg-success" : "bg-danger")">
                                                        @(user.IsActive ? "Active" : "Inactive")
                                                    </span>
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm @(user.IsActive ? "btn-danger" : "btn-success") me-2" @onclick="() => ToggleUserStatus(user)">
                                                        @(user.IsActive ? "Deactivate" : "Activate")
                                                    </button>
                                                    <a href="/admin/user-details/@user.Id" class="btn btn-sm btn-info">
                                                        <i class="bi bi-eye"></i> View
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            <nav aria-label="Page navigation">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                                    </li>
                                </ul>
                            </nav>
                        }
                        else
                        {
                            <div class="alert alert-info text-center">
                                <i class="bi bi-info-circle me-2"></i>
                                No users found matching your criteria.
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<UserViewModel> allUsers = new();
    private List<UserViewModel> filteredUsers = new();
    private bool isLoading = true;
    private string searchQuery = string.Empty;
    private string selectedRole = string.Empty;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUsers()
    {
        allUsers.Clear();
        var users = UserManager.Users.ToList();

        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            var role = roles.FirstOrDefault(); // Assuming a user has only one role (Parent or Expert)

            if (role == "Admin") continue; // Skip admins

            allUsers.Add(new UserViewModel
                {
                    Id = user.Id,
                    FullName = user.FullName,
                    Email = user.Email,
                    Role = role ?? "None",
                    RegistrationDate = user.RegistrationDate,
                    LastLogin = user.LastLogin,
                    IsActive = user.IsActive
                });
        }

        ApplyFiltersAndPagination();
    }

    private void ApplyFiltersAndPagination()
    {
        // Filter by search query
        var filtered = string.IsNullOrWhiteSpace(searchQuery)
            ? allUsers
            : allUsers.Where(u => u.FullName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                 u.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                      .ToList();

        // Filter by role
        if (!string.IsNullOrEmpty(selectedRole))
        {
            filtered = filtered.Where(u => u.Role == selectedRole).ToList();
        }

        // Calculate pagination
        totalPages = (int)Math.Ceiling(filtered.Count / (double)pageSize);
        currentPage = Math.Clamp(currentPage, 1, totalPages);

        // Apply pagination
        filteredUsers = filtered
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void SearchUsers()
    {
        currentPage = 1; // Reset to first page on search
        ApplyFiltersAndPagination();
    }

    private void FilterByRole()
    {
        currentPage = 1; // Reset to first page on filter
        ApplyFiltersAndPagination();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        ApplyFiltersAndPagination();
    }

    private async Task ToggleUserStatus(UserViewModel user)
    {
        try
        {
            var appUser = await UserManager.FindByIdAsync(user.Id);
            if (appUser != null)
            {
                appUser.IsActive = !appUser.IsActive;
                var result = await UserManager.UpdateAsync(appUser);
                if (result.Succeeded)
                {
                    user.IsActive = appUser.IsActive;
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine($"Error updating user status: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling user status: {ex.Message}");
        }
    }

    // ViewModel for displaying user data
    private class UserViewModel
    {
        public string Id { get; set; }
        public string FullName { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
        public DateTime RegistrationDate { get; set; }
        public DateTime? LastLogin { get; set; }
        public bool IsActive { get; set; }
    }
}

<style>
    .card {
        border-radius: 10px;
    }

    .card-header {
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
    }

    .table th {
        background-color: #f8f9fa;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f3f5;
    }

    .form-control:focus,
    .form-select:focus {
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        border-color: #007bff;
    }

    .btn-primary {
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .pagination .page-link {
        color: #007bff;
    }

    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }
</style>