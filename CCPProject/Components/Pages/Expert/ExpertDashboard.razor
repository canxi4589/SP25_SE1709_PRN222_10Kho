@page "/expert-dashboard"
@inherits LayoutComponentBase
@using CCP.Repositori.Entities
@using CCP.Service.DTOs
@using CCP.Service.ExpertService
@using CCPProject.Components.Layout
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject IExpertService ExpertService
@inject UserManager<AppUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@layout Layout1
<div class="content">
	<div class="container-fluid">

		<div class="row">
			<div class="col-md-5 col-lg-4 col-xl-3 theiaStickySidebar">

				<div class="profile-sidebar">
					<div class="widget-profile pro-widget-content">
						<div class="profile-info-widget">
							<a href="#" class="booking-doc-img">
								<img src="assets/img/doctors/doctor-thumb-02.jpg" alt="User Image">
							</a>
							<div class="profile-det-info">
								@if (expert != null)
								{
									<h3>@expert.Name</h3>
									<div class="patient-details">
										<h5 class="mb-0">@expert.ContactInfo</h5>
									</div>
								}
								else
								{
									<h3>Loading...</h3>
								}

							</div>
						</div>
					</div>
					<div class="dashboard-widget">
						<nav class="dashboard-menu">
							<ul>
								<li>
									<a href="/expert-appointments">
										<i class="fas fa-calendar-check"></i>
										<span>Appointments</span>
									</a>
								</li>
								
								<li>
									<a href="/expert-profile">
										<i class="fas fa-user-cog"></i>
										<span>Profile Settings</span>
									</a>
								</li>
								<li>
									<a href="index-2.html">
										<i class="fas fa-sign-out-alt" @onclick="Logout"></i>
										<span>Logout</span>
									</a>
								</li>
							</ul>
						</nav>
					</div>
				</div>
				<!-- /Profile Sidebar -->

			</div>

			<div class="col-md-7 col-lg-8 col-xl-9 content">
				@Body				

			</div>
		</div>

	</div>

</div>		
@code{
	private ExpertDTO expert;
	private bool isLoading = true;
	private bool isSubmitting = false;
	private string saveMessage;
	private string alertClass;
	private byte[] certificateFileContent;
	private string certificateFileName;
	private string certificateContentType;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			var user = authState.User;

			if (user.Identity.IsAuthenticated)
			{
				var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
				if (userId != null)
				{
					var appUser = await UserManager.FindByIdAsync(userId);
					if (appUser != null)
					{
						expert = await ExpertService.GetExpertByUserIdAsync(userId);
					}
				}
			}
		}
		catch (Exception ex)
		{
			saveMessage = $"Error loading profile: {ex.Message}";
			alertClass = "alert-danger";
		}
		finally
		{
			isLoading = false;
		}
	}
	private async Task Logout()
	{

		NavigationManager.NavigateTo("/signout", forceLoad: true);
	}

}